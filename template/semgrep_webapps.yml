parameters:
- name: SEMGREP_APP_TOKEN
  type: string

- name: SEMGREP_REPO_NAME
  type: string
  default: ''
- name: excludePatterns
  type: string
  default: '*.webp,*.png,*.svg,*.woff,*.woff2,*.jpg,*.glb,*.pdf,*.lock,*.md,*.pro,.github/*'
- name: includePatterns
  type: string
  default: ''
- name: failOn
  type: string
  default: ''



steps:
- checkout: self
  clean: true
  fetchDepth: 50
  persistCredentials: true

- script: |
    python -m pip install --upgrade pip
    pip install semgrep
  displayName: 'Install Semgrep'
  env:
    SEMGREP_APP_TOKEN: ${{ parameters.SEMGREP_APP_TOKEN }}
    SEMGREP_REPO_NAME: ${{ parameters.SEMGREP_REPO_NAME }}
    SEMGREP_REPO_URL: $(Build.Repository.Uri)

- ${{ if ne(parameters.SEMGREP_REPO_NAME, '') }}:
  - script: |
      export SEMGREP_REPO_NAME=${{ parameters.SEMGREP_REPO_NAME }}
    displayName: 'Set SEMGREP_REPO_NAME Environment Variable'

- task: Bash@3
  displayName: 'Semgrep SAST Scan'
  inputs:
    targetType: 'inline'
    
    script: |
      EXCLUDE_PATTERNS="${{ parameters.excludePatterns }}"
      INCLUDE_PATTERNS="${{ parameters.includePatterns }}"
      if [ -z "$(System.PullRequest.PullRequestId)" ]; then
          export SEMGREP_REPO_NAME=${{ parameters.SEMGREP_REPO_NAME }}
          echo "Semgrep full scan"
          SEMGREP_COMMAND="semgrep ci"
          if [ -n "$INCLUDE_PATTERNS" ]; then
            IFS=',' read -r -a INCLUDE_ARRAY <<< "$INCLUDE_PATTERNS"
            for PATTERN in "${INCLUDE_ARRAY[@]}"; do
              SEMGREP_COMMAND="$SEMGREP_COMMAND --include='$PATTERN'"
            done
          fi
          IFS=',' read -r -a EXCLUDE_ARRAY <<< "$EXCLUDE_PATTERNS"
          for PATTERN in "${EXCLUDE_ARRAY[@]}"; do
            SEMGREP_COMMAND="$SEMGREP_COMMAND --exclude='$PATTERN'"
          done
          SEMGREP_COMMAND="$SEMGREP_COMMAND --json --output report.json  || true"
          echo "$SEMGREP_COMMAND"
          /bin/bash -c "$SEMGREP_COMMAND"
      elif [ -n "$(System.PullRequest.PullRequestId)" ]; then
          echo "Semgrep diff scan"
          echo "Pull Request Scan from branch=$(Build.SourceBranchName)"
          echo "Pull Request Id: $(System.PullRequest.PullRequestId)"
          echo "Pull Request number: $(System.PullRequest.PullRequestNumber)"
          #export SEMGREP_REPO_NAME=${{ parameters.SEMGREP_REPO_NAME }}

          export SEMGREP_PR_ID=$(System.PullRequest.PullRequestNumber)
          export SEMGREP_BASELINE_REF='origin/$(System.PullRequest.TargetBranch)'
          git fetch origin $(System.PullRequest.TargetBranch):refs/remotes/origin/$(System.PullRequest.TargetBranch)
          SEMGREP_COMMAND="semgrep ci"
          if [ -n "$INCLUDE_PATTERNS" ]; then
            IFS=',' read -r -a INCLUDE_ARRAY <<< "$INCLUDE_PATTERNS"
            for PATTERN in "${INCLUDE_ARRAY[@]}"; do
              SEMGREP_COMMAND="$SEMGREP_COMMAND --include='$PATTERN'"
            done
          fi
          IFS=',' read -r -a EXCLUDE_ARRAY <<< "$EXCLUDE_PATTERNS"
          for PATTERN in "${EXCLUDE_ARRAY[@]}"; do
            SEMGREP_COMMAND="$SEMGREP_COMMAND --exclude='$PATTERN'"
          done
          SEMGREP_COMMAND="$SEMGREP_COMMAND --json --output report.json  || true"
          echo "$SEMGREP_COMMAND"
          /bin/bash -c "$SEMGREP_COMMAND"
      fi

- task: Bash@3
  displayName: 'Process Findings & Set Guardrails'
  inputs:
    targetType: 'inline'
    script: |
      # Check if failOn parameter is provided
      if [ -z "${{ parameters.failOn }}" ]; then
        echo "Security guardrails is not set, skipping task."
        exit 0
      fi

      
      json_file=report.json
      echo "Iterating through findings"
      FAIL_ON="${{ parameters.failOn }}"
      found_high=false
      found_medium=false
      found_low=false
      for k in $(jq '.results | keys | .[]' "$json_file"); do
        value=$(jq -r ".results[$k]" "$json_file")
        echo "$value" > finding_content.json
        severity=$(jq -r '.extra.severity' "finding_content.json")
        case $FAIL_ON in
          HIGH)
            # Check for ERROR
            if [[ $severity == "ERROR" ]]; then
              echo "Found high vulnerabilities, hence exiting with error code 1"
              found_high=true
              exit 1
            fi
            ;;
          MEDIUM)
            # Check for WARNING or ERROR
            if [[ $severity == "WARNING" || $severity == "ERROR" ]]; then
              echo "Found high or medium vulnerabilities, hence exiting with error code 1"
              found_medium=true
              exit 1
            fi
            ;;
          LOW)
            # Check for INFO, WARNING, or ERROR
            if [[ $severity == "INFO" || $severity == "WARNING" || $severity == "ERROR" ]]; then
              echo "Found vulnerabilities, hence exiting with error code 1"
              found_low=true
              exit 1
            fi
            ;;
          *)
            echo "Invalid input for fail-on: $FAIL_ON"
            exit 1
            ;;
        esac
      done
      if [[ $found_high == false && $FAIL_ON == "HIGH" ]]; then
        echo "No high vulnerabilities found"
      fi
      if [[ $found_medium == false && $FAIL_ON == "MEDIUM" ]]; then
        echo "No medium or high vulnerabilities found"
      fi
      if [[ $found_low == false && $FAIL_ON == "LOW" ]]; then
        echo "No vulnerabilities found"
      fi
